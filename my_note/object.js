// ------------------------------------------------------------------------
// Object (객체)
// ------------------------------------------------------------------------

// - 자바스크립트를 이루고 있는 거의 모든 것이 객체이다
// - 숫자, 문자열, 불린값, null, undefined 등의 기본타입을 제외한 모든 값
// (즉, 배열, 함수, 정규표현식 등은 모두 객체에 속함)

// - 자바스크립트의 객체는 키(key)와 값(value)으로 구성된 프로퍼티(property)들의 집합
//     > object = { key : value }
// - 프로퍼티 값으로는 자바스크립트에서 사용가능한 모든 값을 사용가능
// - 함수(일급 객체이므로)도 값으로 취급할 수 있는데, 프로퍼티 값이 함수일 경우
// 일반 함수와 구분을 위해 메소드라 부른다

// 1. 프로퍼티(property)
// - 프로퍼티 이름(key)와 프로퍼티 값(value)로 구성
// - 프로퍼티 이름(key)는 프로퍼티를 식별할 수 있는 유일한 식별자(identifier)임
//    > 프로퍼티 키 : 빈 문자열을 포함한 모든 문자열 또는 symbol 값
//        > 문자열이나 symbol값이 아닌 값을 지정할 경우 타입이 문자열로 변환됨
//        > 중복 선언시 덮어씀
//    > 프로퍼티 값 : 자바스크립트에서 사용가능한 모든 값

// 2. 객체 생성방법

// 클래스?!?
// 다른 객체지향언어의 경우 클래스가 정의하고, 연산자를 이용해 인스턴스를 만드는 과정에서 객체를 생성
// 자바스크립트는 '클래스가 없는' 프로토타입 객체지향 언어이다.
// 클래스 없이 프로토타입 체인/클로저 등으로 객체지향 언어의 상속, 캡슐화 등을 구현
// ES6에서 클래스가 도입되었으나, 새롭게 객체지향 모델을 제공하는 것이 아니라(클래스도 사실 함수이다)
// 다른 객체지향 언어에 익숙한 프로그래머들을 위한 문법적 설탕(Syntactic Sugar)로 사용된다.

// 그래서 객체를 생성하는 방법에는 총 3가지가 있다.
//    - 객체 리터럴 방식
//    - Object() 객체 생성자 함수 이용
//      (자바스크립트 내장 생성자 함수)
//    - 생성자 함수 이용

// 2.1 객체 리터럴 방식
//  ('object literal' syntax)
//  - 리터럴을 표기법이라고 생각하면 쉽다
//  - 즉, 객체를 생성하는 표기법이라는 의미
//  - {} (중괄호)를 이용해 객체를 생성할 수 있다.
//      > 중괄호 안에 아무것도 적지않은 경우는 빈 객체가 생성된다

let person = {
  name: "nam",
  gender: "male",
  sayHello: function () {
    // 값이 함수인 프로퍼티는 메서드라 부른다
    console.log("hello. my name is " + this.name);
  }
};
console.log(person);
// {name: "nam", gender: "male", sayHello: ƒ sayHello()}
// name: "nam"
// gender: "male"
// sayHello: ƒ sayHello() {}

// 2.2 Object() 객체 생성자 함수 이용
// new 연산자와 Object 생성자 함수를 호출해 빈 객체를 생성한 후
// 프로퍼티나 메서드를 추가해 객체를 만드는 방식
